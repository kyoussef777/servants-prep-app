// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  SUPER_ADMIN
  PRIEST
  SERVANT_PREP
  SERVANT
  STUDENT
}

enum YearLevel {
  YEAR_1
  YEAR_2
}

enum EnrollmentStatus {
  ACTIVE
  GRADUATED
  WITHDRAWN
}

enum ExamSectionType {
  BIBLE_STUDIES
  DOGMA
  COMPARATIVE_THEOLOGY
  RITUAL_THEOLOGY_SACRAMENTS
  CHURCH_HISTORY_COPTIC_HERITAGE
  SPIRITUALITY_OF_SERVANT
  PSYCHOLOGY_METHODOLOGY
}

enum AttendanceStatus {
  PRESENT
  LATE
  ABSENT
}

enum LessonStatus {
  SCHEDULED
  CANCELLED
  COMPLETED
}

enum ExamYearLevel {
  YEAR_1
  YEAR_2
  BOTH
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      UserRole
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  enrollments           StudentEnrollment[] @relation("StudentEnrollments")
  mentoredStudents      StudentEnrollment[] @relation("MentorServant")
  attendanceRecords     AttendanceRecord[]
  attendanceRecordedBy  AttendanceRecord[]  @relation("RecordedBy")
  examScores            ExamScore[]
  examScoresGradedBy    ExamScore[]         @relation("GradedBy")
  lessonsCreated        Lesson[]            @relation("CreatedBy")

  @@index([email])
  @@index([role])
}

model AcademicYear {
  id        String   @id @default(cuid())
  name      String   @unique
  startDate DateTime
  endDate   DateTime
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  lessons Lesson[]
  exams   Exam[]

  @@index([isActive])
}

model StudentEnrollment {
  id              String             @id @default(cuid())
  studentId       String             @unique
  yearLevel       YearLevel
  mentorId        String?
  mentorName      String?
  mentorPhone     String?
  isActive        Boolean            @default(true)
  status          EnrollmentStatus   @default(ACTIVE)
  notes           String?            @db.Text
  enrolledAt      DateTime           @default(now())
  updatedAt       DateTime           @updatedAt @default(now())

  // Relations
  student User  @relation("StudentEnrollments", fields: [studentId], references: [id], onDelete: Cascade)
  mentor  User? @relation("MentorServant", fields: [mentorId], references: [id])

  @@index([studentId])
  @@index([mentorId])
  @@index([isActive])
  @@index([status])
}

model ExamSection {
  id                  String          @id @default(cuid())
  name                ExamSectionType @unique
  displayName         String
  passingScore        Int             @default(60)
  averageRequirement  Int             @default(75)

  // Relations
  lessons Lesson[]
  exams   Exam[]
}

model Lesson {
  id                 String       @id @default(cuid())
  academicYearId     String
  examSectionId      String
  title              String
  subtitle           String?
  description        String       @db.Text
  scheduledDate      DateTime
  status             LessonStatus @default(SCHEDULED)
  cancellationReason String?      @db.Text
  lessonNumber       Int
  createdBy          String
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  // Relations
  academicYear     AcademicYear       @relation(fields: [academicYearId], references: [id], onDelete: Cascade)
  examSection      ExamSection        @relation(fields: [examSectionId], references: [id])
  creator          User               @relation("CreatedBy", fields: [createdBy], references: [id])
  attendanceRecords AttendanceRecord[]

  @@unique([academicYearId, lessonNumber])
  @@index([academicYearId])
  @@index([examSectionId])
  @@index([scheduledDate])
  @@index([status])
}

model AttendanceRecord {
  id         String           @id @default(cuid())
  lessonId   String
  studentId  String
  status     AttendanceStatus
  arrivedAt  DateTime?
  notes      String?          @db.Text
  recordedBy String
  recordedAt DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  // Relations
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  student  User   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  recorder User   @relation("RecordedBy", fields: [recordedBy], references: [id])

  @@unique([lessonId, studentId])
  @@index([lessonId])
  @@index([studentId])
  @@index([status])
}

model Exam {
  id             String        @id @default(cuid())
  academicYearId String
  examSectionId  String
  yearLevel      ExamYearLevel
  examDate       DateTime
  totalPoints    Int           @default(100)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  academicYear AcademicYear @relation(fields: [academicYearId], references: [id], onDelete: Cascade)
  examSection  ExamSection  @relation(fields: [examSectionId], references: [id])
  scores       ExamScore[]

  @@index([academicYearId])
  @@index([examSectionId])
  @@index([yearLevel])
}

model ExamScore {
  id         String   @id @default(cuid())
  examId     String
  studentId  String
  score      Float
  percentage Float
  notes      String?  @db.Text
  gradedBy   String
  gradedAt   DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  exam    Exam @relation(fields: [examId], references: [id], onDelete: Cascade)
  student User @relation(fields: [studentId], references: [id], onDelete: Cascade)
  grader  User @relation("GradedBy", fields: [gradedBy], references: [id])

  @@unique([examId, studentId])
  @@index([examId])
  @@index([studentId])
}
